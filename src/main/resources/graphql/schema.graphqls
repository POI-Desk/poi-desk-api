type Query{
    getAllUsers(input: String, pageNumber: Int, pageSize: Int): UserPageResponse!
    getUserById(id: ID): User
    getRolesOfUser(id: ID): [Role!]
    allBookings: [Booking!]
    getBookingsByDate(date: String): [Booking!]
    getBookingById(id: ID): Booking
    getAllLocations: [Location!]
    getAllDesks: [Desk!]
    getAllFloors: [Floor!]
    getDeskById(deskid: ID!): Desk
    getDesksOnFloor(floorid: ID!): [Desk!]
    getBookingsByUserId(userid: ID!): [Booking!]
    isBookedAt(deskId: ID!, date: String!, dayTime: String!): Boolean
    getBookingsByUserid(userid: ID!): [Booking!]
    getFloorsInBuilding(buildingid: ID!): [Floor!]
    getBuildingsInLocation(locationid: ID!): [Building!]
    getSeatOfBooking(bookingid: ID!): Desk
    getDailyBookings: [DailyBooking!]
    getMonthlyBooking(year: String!, month: String!, location: ID!): MonthlyBooking
    getQuarterlyBooking(year: String!, quarter: String!, location: ID!): QuarterlyBooking
    getYearlyBooking(year: String!, location: ID!): YearlyBooking
    getAlLYears: [String]
}

type Mutation{
    changeUsername(id: String!, name:String!): User
    bookDesk(booking: Bookinginput!): Booking
    deleteBooking(bookingId: ID!): ID
    setdefaultLocation(userid: ID!, locationid: ID!): Boolean
    createOrLoginAsUser(username: String!): User
    addDesksToFloor(floorid: ID!, desks: [Deskinput!]!): [Desk!]
    editBooking(bookingInput: EditBookingInput!) : Booking
    addRoom(roomInput: RoomInput!): Room
    addInterior(input: InteriorInput!): Interior
}

type Attribute{
    pk_attributeid: ID!
    attributename: String!
    createdon: String!
    updatedon: String!
    desks: [Desk!]!
}
type DailyBooking{
    pk_day: String!
    fk_Location: Location!
    totalBooking: Int!
    fk_monthlyBookingId: MonthlyBooking!
}

type MonthlyBooking{
    pk_monthlyBookingId: ID!
    month: String!
    fk_Location: Location!
    totalBooking: Int
    amountOfDesks: Int
    highestBookings: Int
    averageBookings: Int
    lowestBookings: Int
    fk_quarterlyBookingId: QuarterlyBooking!
    dailyBookings: [DailyBooking]
}

type QuarterlyBooking{
    pk_quarterlyBookingId: ID!
    year: String!
    fk_Location: Location!
    quarter: String!
    totalBooking: Int
    amountOfDesks: Int
    highestBookings: Int
    averageBookings: Int
    lowestBookings: Int
    fk_yearlyBookingId: Location!
    monthlyBookings: [MonthlyBooking!]
}

type YearlyBooking{
    pk_yearlyBookingId: ID!
    year: String!
    fk_Location: Location!
    totalBooking: Int
    amountOfDesks: Int
    highestBookings: Int
    averageBookings: Int
    lowestBookings: Int
    quarterlyBookings: [QuarterlyBooking!]
}

type UserAnalytics{
    pk_useranalyticid: ID!
    user: User!
    year : String!
    result: String!
    createdon: String!
}

type Booking{
    pk_bookingid: ID!
    bookingnumber: String!
    date: String!
    createdon: String!
    updatedon: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    user: User
    desk: Desk
}

type Building{
    pk_buildingid: ID!
    buildingname: String!
    createdon: String!
    updatedon: String!
    location: Location
    floors: [Floor!]
}

type Floor{
    pk_floorid: ID!
    floorname: String!
    createdon: String!
    updatedon: String!
    building: Building!
    desks: [Desk!]
}

type Location{
    pk_locationid: ID!
    locationname: String!
    createdon: String!
    updatedon: String!
    users: [User!]
    buildings: [Building!]
    dailyBookings: [DailyBooking!]
    monthlyBookings: [MonthlyBooking!]
    quarterlyBookings: [QuarterlyBooking!]
    yearlyBookings: [YearlyBooking!]
}

type Role{
    pk_roleid: ID!
    rolename: String!
    createdon: String!
    updatedon: String!
    users: [User!]
}

type Desk{
    pk_deskid: ID!
    desknum: String!
    x: Float!
    y: Float!
    createdon: String!
    updatedon: String!
    bookings: [Booking!]
    attributes: [Attribute!]
    floor: Floor
}

type User{
    pk_userid: ID!
    username: String!
    createdon: String!
    updatedon: String!
    roles: [Role!]
    bookings: [Booking!]
    location: Location
    userAnalytics: [UserAnalytics!]
}

type Map{
    pk_mapId: ID!
    width: Int!
    height: Int!
    createdOn: String!
    updatedOn: String!
}

type Room{
    pk_roomId: ID!
    x: Int!
    y: Int!
    width: Int!
    height: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type Interior{
    pk_interiorId: ID!
    type: InteriorType!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    height: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type Label{
    pk_labelId: ID!
    text: String!
    x: Int!
    y: Int!
    pt: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type UserConnection{
    edges: [UserEdge]
    pageInfo: UserInfo!
}

type UserEdge{
    cursor: String
    node: User!
}

type UserInfo{
    startCursor: String
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type UserPageResponse {
    content: [User!]!
    hasNextPage: Boolean!
}

input Deskinput{
    desknum: String!
    x: Int!
    y: Int!
}

input Bookinginput{
    date: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    userid: String!
    deskid: String!
}

input EditBookingInput{
    pk_bookingid: ID!
    deskid: ID!
    date: String!
    ismorning: Boolean!
    isafternoon: Boolean!
}

input RoomInput{
    x: Int!
    y: Int!
    width: Int!
    height: Int!
    mapId: ID!
}

input InteriorInput{
    type: InteriorType!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    height: Int!
}

enum InteriorType{
    Couch,
    Aquarium
}
type Query{
    getAllUsers: [User!]
    getUserById(id: ID): User
    getRolesOfUser(id: ID): [Role!]
    allBookings: [Booking!]
    getBookingsByDate(date: String): [Booking!]
    getBookingById(id: ID): Booking
    getAllBookingLogs: [BookingLog!]
    getAllExpiredBookingLogs: [BookingLog!]
    getAllDeletedBookingLogs: [BookingLog!]
    getMorningBookingLogs: [BookingLog!]
    getAfternoonBookingLogs: [BookingLog!]
    getFullDayBookingLogs: [BookingLog!]
    getAllLocations: [Location!]
    getAllDesks: [Desk!]
    getAllFloors: [Floor!]
    getDeskById(deskid: ID!): Desk
    getDesksOnFloor(floorid: ID!): [Desk!]
    getBookingsByUserId(userid: ID!): [Booking!]
    isBookedAt(deskId: ID!, date: String!, dayTime: String!): Boolean
    getBookingsByUserid(userid: ID!): [Booking!]
    getFloorsInBuilding(buildingid: ID!): [Floor!]
    getBuildingsInLocation(locationid: ID!): [Building!]
    getSeatOfBooking(bookingid: ID!): Desk
}

type Mutation{
    changeUsername(id: String!, name:String!): User
    bookDesk(booking: Bookinginput!): Booking
    deleteBooking(bookingId: ID!): ID
    setdefaultLocation(userid: ID!, locationid: ID!): Boolean
    createOrLoginAsUser(username: String!): User
    addDesksToFloor(floorid: ID!, desks: [Deskinput!]!): [Desk!]
    editBooking(bookingInput: EditBookingInput!) : Booking
}

type Attribute{
    pk_attributeid: ID!
    attributename: String!
    createdon: String!
    updatedon: String!
    desks: [Desk!]!
}

type Booking{
    pk_bookingid: ID!
    bookingnumber: String!
    date: String!
    createdon: String!
    updatedon: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    user: User
    desk: Desk
}

type BookingLog{
    pk_bookinglogid: ID!
    bookingnumber: String!
    date: String!
    createdon: String!
    updatedon: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    wasdeleted: Boolean!
    user: User
    desk: Desk
}

type Building{
    pk_buildingid: ID!
    buildingname: String!
    createdon: String!
    updatedon: String!
    location: Location
    floors: [Floor!]
}

type Floor{
    pk_floorid: ID!
    floorname: String!
    createdon: String!
    updatedon: String!
    building: Building!
    desks: [Desk!]
}

type Location{
    pk_locationid: ID!
    locationname: String!
    createdon: String!
    updatedon: String!
    users: [User!]
    buildings: [Building!]
}

type Role{
    pk_roleid: ID!
    rolename: String!
    createdon: String!
    updatedon: String!
    users: [User!]
}

type Desk{
    pk_deskid: ID!
    desknum: String!
    x: Float!
    y: Float!
    createdon: String!
    updatedon: String!
    bookings: [Booking!]
    bookinglogs: [BookingLog!]
    attributes: [Attribute!]
    floor: Floor
}

type User{
    pk_userid: ID!
    username: String!
    createdon: String!
    updatedon: String!
    roles: [Role!]
    bookings: [Booking!]
    bookinglogs: [BookingLog!]
    location: Location
}

input Deskinput{
    desknum: String!
    x: Float!
    y: Float!
}

input Bookinginput{
    date: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    userid: String!
    deskid: String!
}

input EditBookingInput{
    pk_bookingid: ID!
    deskid: ID!
    date: String!
    ismorning: Boolean!
    isafternoon: Boolean!
}
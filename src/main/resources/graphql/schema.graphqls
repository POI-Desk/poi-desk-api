type Query{
    getAllUsers(input: String, pageNumber: Int, pageSize: Int): UserPageResponse!
    getUserById(id: ID): User
    getRolesOfUser(id: ID): [Role!]
    allBookings: [Booking!]
    getBookingsByDateOnFloor(date: String!, floorId: ID!): [Booking!]!
    getBookingById(id: ID): Booking
    getAllLocations: [Location!]
    getAllDesks: [Desk!]
    getAllFloors: [Floor!]
    getDesksOnFloor(floorid: ID!): [Desk!]
    getBookingsByUserId(userid: ID!): [Booking!]
    isBookedAt(deskId: ID!, date: String!, dayTime: String!): Boolean
    getBookingsByUserid(userid: ID!): [Booking!]
    getFloorsInBuilding(buildingid: ID!): [Floor!]
    getBuildingsInLocation(locationid: ID!): [Building!]
    getSeatOfBooking(bookingid: ID!): Desk
    getYearlyBookings: [YearlyBooking!]
    getMapByFloor(floorId: ID!): Map
    getMapById(mapId: ID!): Map
    getDeskById(deskId: ID!): Desk
    getDailyBookings: [DailyBooking!]
    getMonthlyBooking(year: String!, month: String!, location: ID!): MonthlyBooking
    getQuarterlyBooking(year: String!, quarter: String!, location: ID!): QuarterlyBooking
    getYearlyBooking(year: String!, location: ID!): YearlyBooking
    getAlLYears: [String]
}

type Mutation{
    changeUsername(id: String!, name:String!): User
    bookDesk(booking: Bookinginput!): Booking
    deleteBooking(bookingId: ID!): ID
    setdefaultLocation(userid: ID!, locationid: ID!): Boolean
    createOrLoginAsUser(username: String!): User
    addDesksToFloor(floorId: ID!, mapId: ID!, desks: [DeskInput!]!): [Desk!]
    editBooking(bookingInput: EditBookingInput!) : Booking
    addRoom(roomInput: RoomInput!): Room
    addInterior(input: InteriorInput!): Interior
    createMap(floorId: ID!, mapInput: MapInput!): Map
    updateDoorsOnMap(mapId: ID!, doorInputs: [UpdateDoorInput!]!): [Door!]
    updateWallsOnMap(mapId: ID!, wallInputs: [UpdateWallInput!]!): [Wall!]
    updateDesksOnMap(mapId: ID!, deskInputs: [UpdateDeskInput!]!): [Desk!]
    updateRoomsOnMap(mapId: ID!, roomInputs: [UpdateRoomInput!]!): [Room!]
    updateLabelsOnMap(mapId: ID!, labelInputs: [UpdateLabelInput!]!): [Label!]
    deleteRooms(roomIds: [ID!]!): [Room!]
    deleteWalls(wallIds: [ID!]!): [Wall!]
    deleteDoors(doorIds: [ID!]!): [Door!]
    deleteDesks(deskIds: [ID!]!): [Desk!]
    updateMap(mapId: ID!, mapInput: MapInput!): Map
    deleteMap(mapId: ID!): Boolean
    deleteLabels(labelIds: [ID!]!): [Label!]
}

type Attribute{
    pk_attributeid: ID!
    attributename: String!
    createdon: String!
    updatedon: String!
    desks: [Desk!]!
}
type DailyBooking{
    pk_dailyBookingId: ID!
    day: String!
    morning: Int!
    afternoon: Int!
    totalBookings: Int!
    createdon: String!
    updatedon: String!
    fk_Location: Location!
    fk_building: Building!
    fk_floor: Floor!
    fk_monthlyBookingId: MonthlyBooking!
    month_morning_highestBooking: [MonthlyBooking!]
    quarter_morning_highestBooking: [QuarterlyBooking!]
    year_morning_highestBooking: [YearlyBooking!]
    month_morning_lowestBooking: [MonthlyBooking!]
    quarter_morning_lowestBooking: [QuarterlyBooking!]
    year_morning_lowestBooking: [YearlyBooking!]
    month_afternoon_highestBooking: [MonthlyBooking!]
    quarter_afternoon_highestBooking: [QuarterlyBooking!]
    year_afternoon_highestBooking: [YearlyBooking!]
    month_afternoon_lowestBooking: [MonthlyBooking!]
    quarter_afternoon_lowestBooking: [QuarterlyBooking!]
    year_afternoon_lowestBooking: [YearlyBooking!]
}

type MonthlyBooking{
    pk_monthlyBookingId: ID!
    month: String!
    totalBookings: Int!
    days: Int!
    amountOfDesks: Int!
    morning_highestBooking: DailyBooking
    morningAverageBooking: Float
    morning_lowestBooking: DailyBooking
    afternoon_highestBooking: DailyBooking
    afternoonAverageBooking: Float
    afternoon_lowestBooking: DailyBooking
    createdon: String!
    updatedon: String!
    fk_Location: Location!
    fk_building: Building!
    fk_floor: Floor!
    fk_quarterlyBookingId: QuarterlyBooking!
    dailyBookings: [DailyBooking]
}

type QuarterlyBooking{
    pk_quarterlyBookingId: ID!
    year: String!
    quarter: String!
    totalBookings: Int!
    days: Int!
    amountOfDesks: Int!
    morning_highestBooking: DailyBooking
    morningAverageBooking: Float
    morning_lowestBooking: DailyBooking
    afternoon_highestBooking: DailyBooking
    afternoonAverageBooking: Float
    afternoon_lowestBooking: DailyBooking
    createdon: String!
    updatedon: String!
    fk_Location: Location!
    fk_building: Building!
    fk_floor: Floor!
    fk_yearlyBookingId: Location!
    monthlyBookings: [MonthlyBooking!]
}

type YearlyBooking{
    pk_yearlyBookingId: ID!
    year: String!
    totalBookings: Int!
    days: Int!
    amountOfDesks: Int!
    morning_highestBooking: DailyBooking
    morningAverageBooking: Float
    morning_lowestBooking: DailyBooking
    afternoon_highestBooking: DailyBooking
    afternoonAverageBooking: Float
    afternoon_lowestBooking: DailyBooking
    createdon: String!
    updatedon: String!
    fk_Location: Location!
    fk_building: Building!
    fk_floor: Floor!
    quarterlyBookings: [QuarterlyBooking!]
}

type UserAnalytics{
    pk_useranalyticid: ID!
    user: User!
    year : String!
    result: String!
    createdon: String!
}

type Booking{
    pk_bookingid: ID!
    bookingnumber: String!
    date: String!
    createdon: String!
    updatedon: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    user: User!
    desk: Desk!
}

type Building{
    pk_buildingid: ID!
    buildingname: String!
    createdon: String!
    updatedon: String!
    location: Location
    floors: [Floor!]
}

type Floor{
    pk_floorid: ID!
    floorname: String!
    createdon: String!
    updatedon: String!
    building: Building!
    desks: [Desk!]
}

type Location{
    pk_locationid: ID!
    locationname: String!
    createdon: String!
    updatedon: String!
    users: [User!]
    buildings: [Building!]
    dailyBookings: [DailyBooking!]
    monthlyBookings: [MonthlyBooking!]
    quarterlyBookings: [QuarterlyBooking!]
    yearlyBookings: [YearlyBooking!]
}

type Role{
    pk_roleid: ID!
    rolename: String!
    createdon: String!
    updatedon: String!
    users: [User!]
}

type Desk{
    pk_deskid: ID!
    desknum: String!
    x: Float!
    y: Float!
    rotation: Int!
    createdon: String!
    updatedon: String!
    bookings: [Booking!]
    attributes: [Attribute!]
    floor: Floor
    map: Map
}

type User{
    pk_userid: ID!
    username: String!
    createdon: String!
    updatedon: String!
    roles: [Role!]
    bookings: [Booking!]
    location: Location
    userAnalytics: [UserAnalytics!]
}

type Map{
    pk_mapId: ID!
    width: Int!
    height: Int!
    createdOn: String!
    updatedOn: String!
    rooms: [Room!]
    desks: [Desk!]
    interiors: [Interior!]
    labels: [Label!]
    walls: [Wall!]
    doors: [Door!]
    floor: Floor!
}

type Door{
    pk_doorId: ID!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type Wall{
    pk_wallId: ID!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type Room{
    pk_roomId: ID!
    x: Int!
    y: Int!
    width: Int!
    height: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

#TODO: impl service and controller
type Interior{
    pk_interiorId: ID!
    type: InteriorType!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    height: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type Label{
    pk_labelId: ID!
    text: String!
    x: Int!
    y: Int!
    rotation: Int!
    pt: Int!
    createdOn: String!
    updatedOn: String!
    map: Map
}

type UserConnection{
    edges: [UserEdge]
    pageInfo: UserInfo!
}

type UserEdge{
    cursor: String
    node: User!
}

type UserInfo{
    startCursor: String
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type UserPageResponse {
    content: [User!]!
    hasNextPage: Boolean!
}

input DeskInput{
    desknum: String!
    x: Int!
    y: Int!
}

input Bookinginput{
    date: String!
    ismorning: Boolean!
    isafternoon: Boolean!
    userid: String!
    deskid: String!
}

input EditBookingInput{
    pk_bookingid: ID!
    deskid: ID!
    date: String!
    ismorning: Boolean!
    isafternoon: Boolean!
}

input RoomInput{
    x: Int!
    y: Int!
    width: Int!
    height: Int!
}

input InteriorInput{
    type: InteriorType!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    height: Int!
}

enum InteriorType{
    Couch,
    Aquarium
}

input MapInput{
    width: Int!
    height: Int!
}

input DoorInput{
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
}

input WallInput{
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
}

input LabelInput{
    text: String!
    x: Int!
    y: Int!
    rotation: Int!
}

input UpdateDoorInput{
    pk_doorId: ID
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    #delete: Boolean!
}

input UpdateWallInput{
    pk_wallId: ID
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    #delete: Boolean!
}

input UpdateDeskInput{
    pk_deskid: ID       #TODO: change to camelCase
    desknum: String!    #TODO: change to camelCase
    x: Int!
    y: Int!
    #delete: Boolean!
}

input UpdateMapInput{
    pk_mapId: ID
    width: Int!
    height: Int!
    #delete: Boolean!
}

input UpdateInteriorInput{
    pk_interiorId: ID
    type: InteriorType!
    x: Int!
    y: Int!
    rotation: Int!
    width: Int!
    height: Int!
    #delete: Boolean!
}

input UpdateRoomInput{
    pk_roomId: ID
    x: Int!
    y: Int!
    width: Int!
    height: Int!
    #delete: Boolean!
}

input UpdateLabelInput{
    pk_labelId: ID
    text: String!
    x: Int!
    y: Int!
    rotation: Int!
}
